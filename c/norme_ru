Норма
Версия 2.0.2

Матье mathieu@staff.42.fr
Гаэтан gaetan@staff.42.fr
Лычи lytchi@staff.42.fr
Котон coton@42.fr
Мартина martine@42.fr




Резюме: В этом документе описан применимый стандарт (норма) в пункте 42.
Стандарт программирования определяет набор правил, которым необходимо следовать при написании кода. Вы должны
всегда соблюдайте Норму для всех проектов C в школе, если не указано иное.
Содержание
Я Предисловие 2
I.1 Зачем вводить стандарт? . . . . . . . . . . . . . . . . . . . . . . . . . 2
I.2 Нормативы подачи заявок. . . . . . . . . . . . . . . . . . . . . . . . 2
I.3 Предложения. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
I.4 Отказ от ответственности. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2

II Норма 3
II.1 Номинал. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
II.2 Форматирование. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
II.3 Параметры функций. . . . . . . . . . . . . . . . . . . . . . . . . . . 5
II.4 Функции . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
II.5 Typedef, struct, enum и Union. . . . . . . . . . . . . . . . . . . . . 5
II.6 Заголовки. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
II.7 Макросы и препроцессоры. . . . . . . . . . . . . . . . . . . . . . . . 6
II.8 Запрещенные вещи! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
II.9 Комментарии. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
II.10 Файлы. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
II.11 Makefile. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7




1
Глава I

Предисловие

В этом документе описан применимый стандарт (Норма) в пункте 42. Стандарт программирования.
определяет набор правил, которым необходимо следовать при написании кода. Вы всегда должны соблюдать Норму
все проекты C в школе, если не указано иное.


I.1 Зачем вводить стандарт?
Две основные цели Нормы: 1. Отформатировать и стандартизировать ваш код так, чтобы любой
(студенты, сотрудники и даже вы сами) смогут легко их прочитать и понять. 2. Чтобы направлять вас
в написании короткого и простого кода.


I.2 Нормативы подачи заявок
Все ваши файлы C должны соответствовать школьным нормам. Это проверит ваш оценщик. Если
Если вы допустили любую нормальную ошибку, вы получите 0 баллов за упражнение или даже за весь проект.
Во время коллегиальной оценки ваш оценщик должен будет запустить «Norminette», присутствующий в
дампы ваших материалов. Проверке подлежит только обязательная часть Нормы.
«Норминетта».


I.3 Предложения
Вскоре вы поймете, что Норма не так устрашающа, как кажется. На
напротив, это поможет вам больше, чем вы думаете. Это позволит вам читать код ваших одноклассников.
проще и наоборот. Исходный файл, содержащий одну ошибку Norm, будет обработан
так же, как исходный файл, содержащий 10 ошибок Norm. Мы настоятельно рекомендуем вам сохранить
Помните о нормах при кодировании, даже если поначалу вам может показаться, что это вас замедляет. В
время это станет рефлексом.


I.4 Отказ от ответственности
«Норминетта» — это программа, а во всех программах есть ошибки. Если вы заметите один,
пожалуйста, сообщите об этом в соответствующем разделе форума. Однако, как всегда «Норминетта»
преобладает, все ваши материалы должны быть адаптированы к его ошибкам.



2
Глава II

Норма

II.1 Номинал
Обязательная часть
• Имя структуры должно начинаться с s_.

• Имя typedef должно начинаться с t_.

• Имя союза должно начинаться с u_.

• Имя перечисления должно начинаться с e_.

• Имя глобального объекта должно начинаться с g_.

• Имена переменных и функций могут содержать только строчные буквы, цифры и '_' (Unix
Случай).

• Имена файлов и каталогов могут содержать только строчные буквы, цифры и символ «_» (регистр Unix).

• Файл должен скомпилироваться.

• Символы, не являющиеся частью стандартной таблицы ascii, запрещены.

Советы
• Объекты (переменные, функции, макросы, типы, файлы или каталоги) должны иметь максимальное
явные или наиболее мнемонические имена, насколько это возможно. Только «счетчики» могут быть названы в вашем
нравится.

• Допускаются сокращения, если они направлены на сокращение исходного названия.
оно остается понятным. Если имя содержит более одного слова, слова должны быть
разделены по '_'.

• Все идентификаторы (функции, макросы, типы, переменные и т. д.) должны быть на английском языке.

• Любое использование глобальной переменной должно быть оправдано.

3
Норма Версия 2.0.2


II.2 Форматирование
Обязательная часть
• Все ваши файлы должны начинаться со стандартного школьного заголовка (с первой строки
файл). Этот заголовок доступен по умолчанию в дампах emacs и vim.

• Вы должны сделать отступ в своем коде с помощью табуляции из 4 пробелов. Это не то же самое, что 4
средние пробелы, мы говорим здесь о реальных таблицах.

• Каждая функция должна содержать не более 25 строк, не считая собственных фигурных строк функции.
кронштейны.

• Каждая строка должна иметь ширину не более 80 столбцов, включая комментарии. Предупреждение: а
табуляция считается не столбцом, а количеством пробелов, которые она представляет.

• Одна инструкция на строку.

• Пустая строка должна быть пустой: никаких пробелов и табуляции.

• Строка никогда не может заканчиваться пробелами или табуляциями.

• Вам необходимо начинать новую строку после каждой фигурной скобки или конца управляющей структуры.

• За каждой запятой или точкой с запятой должен следовать пробел, если это не конец строки.

• Каждый оператор (двоичный или тройной) или операнд должен быть разделен одним и только
один - космос.

• За каждым ключевым словом C должен следовать пробел, за исключением ключевых слов для типов (таких как
как int, char, float и т. д.), а также sizeof.

• Каждое объявление переменной должно иметь отступ в одном и том же столбце.

• Звездочки, сопровождающие указатели, должны быть прикреплены к именам переменных.

• Одно объявление переменной в каждой строке.

• Мы не можем разместить объявление и инициализацию в одной строке, за исключением
глобальные переменные и статические переменные.

• Объявления должны находиться в начале функции и должны быть разделены знаком
пустая строка.

• Между объявлениями и реализациями не может быть пустой строки.

• Многократное присвоение строго запрещено.



4
Норма Версия 2.0.2


• Вы можете добавить новую строку после инструкции или структуры управления, но вам придется
добавить отступ с помощью скобок или оператора аффектации. Операторы должны быть на
начало строки.


II.3 Параметры функций
Обязательная часть
• Функция может принимать максимум 4 именованных параметра.

• Функция, которая не принимает аргументы, должна быть явно типизирована с помощью
слово «пустота» в качестве аргумента.


II.4 Функции
Обязательная часть
• Параметры в прототипах функций должны иметь имена.

• Каждая функция должна быть отделена от следующей пустой строкой.

• Вы не можете объявить более 5 переменных в блоке.

• Возврат функции должен быть заключен в круглые скобки.

Советы
• Идентификаторы ваших функций должны быть выровнены в одном файле. То же самое касается заголовка
файлы.


II.5 Определение типа, структура, перечисление и объединение
Обязательная часть
• Добавляйте табуляцию при объявлении структуры, перечисления или объединения.

• При объявлении переменной типа struct, enum или Union добавьте один пробел в
тип.

• Добавьте таблицу между двумя параметрами typedef.

• При объявлении структуры, объединения или перечисления с помощью typedef применяются все правила. Вы должны
выровняйте имя typedef с именем структуры/объединения/перечисления.

• Вы не можете объявить структуру в файле .c.




5
Норма Версия 2.0.2


II.6 Заголовки
Обязательная часть
• В файлах заголовков разрешено следующее: включение заголовков (системных или нет), объявление
настройки, определения, прототипы и макросы.

• Все включения (.c или .h) должны находиться в начале файла.

• Защитим заголовки от двойных включений. Если файл ft_foo.h, его наблюдатель
макрос — FT_FOO_H.

• Прототипы функций должны находиться исключительно в файлах .h.

• Неиспользуемые включения заголовков (.h) запрещены.

Советы
• Все включения заголовков должны быть обоснованы как в файле .c, так и в файле .h.


II.7 Макросы и препроцессоры
Обязательная часть
• Создаваемые вами константы препроцессора (или #define) должны использоваться только для ассоциирования.
буквальные и постоянные значения.

• Все #define, созданные для обхода нормы и/или запутывания кода, запрещены. Этот
точку должен проверить человек.

• Вы можете использовать макросы, доступные в стандартных библиотеках, только если они разрешены.
в рамках данного проекта.

• Многострочные макросы запрещены.

• Только имена макросов пишутся заглавными буквами.

• Необходимо сделать отступ для символов, следующих за #if , #ifdef или #ifndef.


II.8 Запрещенные вещи!
Обязательная часть
• Вам не разрешено использовать:

◦ для

◦ делай... пока


6
Норма Версия 2.0.2


◦ переключатель

◦ случай

◦ перейти к

• Вложенные тернарные операторы, такие как «?».

• VLA — массивы переменной длины.


II.9 Комментарии
Обязательная часть
• Вам разрешено комментировать код в исходных файлах.

• Комментарии не могут находиться внутри тел функций.

• Комментарии начинаются и заканчиваются одной строкой. Все промежуточные линии должны быть выровнены и
начать с '**'.

• Никаких комментариев с //.

Советы
• Ваши комментарии должны быть на английском языке. И они должны быть полезны.

• Комментарий не может оправдать «ублюдочную» функцию.


II.10 Файлы
Обязательная часть
• Вы не можете включить файл .c.

• В файле .c не может быть более 5 определений функций.


II.11 Make-файл
Обязательная часть
• Правила $(NAME), clean, fclean, re и all являются обязательными.

• Если make-файл будет перекомпонован, проект будет считаться нефункциональным.

• В случае мультибинарного проекта помимо рассмотренных нами правил у вас должен быть
правило, которое компилирует оба двоичных файла, а также специальное правило для каждого скомпилированного двоичного файла.



7
Норма Версия 2.0.2


• В случае проекта, который вызывает библиотеку функций (например: libft), ваш make-файл
должен автоматически скомпилировать эту библиотеку.

• Все исходные файлы, необходимые для компиляции вашего проекта, должны быть явно названы в вашем файле.
Makefile.




8
 
